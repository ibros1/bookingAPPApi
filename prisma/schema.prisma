// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
enum Role {
  
  ADMIN
  BOOKER
  OFFICER
  USER
}


model User {
  id           String    @id @default(uuid())
  name         String
  email        String?   @unique
  profilePhoto String?          
  address      String?
  phone        String    @unique
  password     String
  role         Role      @default(USER)
  isVerified   Boolean   @default(false)
  isActive     Boolean   @default(true)
  refreshToken String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  otps         OTP[]  

  routes       Route[]
  adress       address[] @relation("UserAddresses")     // addresses owned by this user
  officers      address[] @relation("OfficerAddresses")  
  hotel        hotel[]
  rides        Ride[]
  bookings     Booking[]
  activity     ActivityLog[]
  emloyee Employee[]
  messages Message[]
  messageRecipients MessageRecipient[]
}


model OTP {
  id        String   @id @default(cuid())
  userId    String
  code      String
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}
model PendingRegistration {
  id        String   @id @default(cuid())
  phone     String   @unique
  name      String
  email     String?
  address String
  password  String   
  createdAt DateTime @default(now())
}


model address {
  id        String   @id @default(nanoid())
  address   String
  userId    String
  officerId String
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  user      User     @relation("UserAddresses", fields: [userId], references: [id])
 officers User[] @relation("OfficerAddresses")
  hotels    hotel[]
}


model Route {
  id String @id @default(ulid())
  userId String
  from String
  end String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdUser User @relation(fields: [userId], references: [id])
  rides Ride[]
}




model hotel {

  id String @id @default(uuid())
  userId String?
  name String
  addressId String
  bookerId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  booker User? @relation(fields: [bookerId], references: [id])
  address address @relation(fields: [addressId], references: [id])

}

enum Currency {
  USD
  SLSH
}
enum paymentType {
  ZAAD
  eDAHAB
  KAASH_PLUS
  BANK
  OFFLINE
  CASH
}

model Ride {
  id       String   @id @default(uuid())
  userId   String
  routeId  String
  fareUSD  Float    
  fareSLSH Float


  user     User   @relation(fields: [userId], references: [id])
  route    Route  @relation(fields: [routeId], references: [id])
  bookings Booking[]
}

model Booking {
  id         String   @id @default(uuid())
  rideId     String
  bookerId   String
  currency   Currency   // chosen by booker
  name String
  phoneNumber String
  amount Int
  qty Int
  total_amount Int
  paymentType    paymentType
  createdAt  DateTime   @default(now())


  ride   Ride @relation(fields: [rideId], references: [id])
  booker User @relation(fields: [bookerId], references: [id])
}


model ActivityLog {
  id        String   @id @default(uuid())
  userId    String
  targetType  String?                    // e.g. "EMPLOYEE", "BOOKING", "USER"
  targetId    String?                    
  action    String  
  details   Json?
   description String? 
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}
enum Status {
  active
  inActive
}

enum Sex {
  male
  female
}


model Employee {
  id String @id @default(uuid())
  userId String
  name String
  phone String @unique
  sex Sex
  position String?
  address String?
  status Status  @default(active)
  notes String?
  salary Float?
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
  creator User @relation(fields: [userId], references: [id])
  recipients MessageRecipient[]
 pyroll Payroll[]
}



model Message {
  id String @id @default(uuid())
  message String
  userId String
  createdAt DateTime @default(now())
  recipients MessageRecipient[]  
  creator User @relation(fields: [userId], references: [id])
  extraNumbers ExtraNumber[]   
}

model MessageRecipient {
  id String @id @default(uuid())
  userId String
  employeeId String?
  phone String                     
  messageId String
  sent Boolean @default(false)    
   scheduledAt DateTime?   
  message Message @relation(fields: [messageId], references: [id])
  creator User @relation(fields: [userId], references: [id])
  employee Employee? @relation(fields: [employeeId], references: [id])
  @@index([phone, sent])         
}


model ExtraNumber {
  id        String   @id @default(uuid())
  phone     String
  name      String?       
  messageId String
  message   Message  @relation(fields: [messageId], references: [id])

}


model Payroll {
  id          String   @id @default(uuid())
  employeeId  String
  baseSalary  Float
  allowances  Float?
  deductions  Float?
  netPay      Float
  status      PayrollStatus @default(PENDING)
  paymentType paymentType
  paidAt      DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  transactionId String? // from Waafi API
 referenceId   String?  
  employee Employee @relation(fields: [employeeId], references: [id])
}

enum PayrollStatus {
  PENDING
  PAID
  FAILED
}
