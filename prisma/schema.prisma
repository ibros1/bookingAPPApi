// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
enum Role {
  USER
  ADMIN
  DRIVER
  CASHIER
  DISPATCHER
}


model User {
  id           String   @id @default(cuid())
  name         String? 
  email        String?  @unique
  googleId     String?  @unique
  profilePhoto String?          
  phone        String?  @unique
  password     String?
  role         Role     @default(USER)
  isVerified   Boolean  @default(false)
  isActive     Boolean  @default(false)
  isDriver Boolean @default(false)
  refreshToken  String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  otps         OTP[]  
  vehicleId String?
  vehicle Vehicle[]
  routes Route[]

  scheduleDriverRides scheduleRide[]
  books Booking[]
}

model OTP {
  id        String   @id @default(cuid())
  userId    String
  code      String
  expiresAt DateTime
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id])
}

enum vehicleType {
  Hiace
  Noah
  Bus
  Taxi
}

model Vehicle {
  id              String           @id @default(cuid())
  vehicleNo       String //plate car
  name            vehicleType   
  driverId String  
  drivers  User @relation(fields: [driverId], references: [id]) 
   capacity  Int     
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  scheduleRides scheduleRide[]
  seats Seats[]
}

model Route {
  id String @id @default(ulid())
  userId String
  from String
  end String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdUser User @relation(fields: [userId], references: [id])
  scheduleRides scheduleRide[]

}
enum Days {
    SATURDAY
    SUNDAY
    MONDAY
    TUESDAY
    WEDNESDAY
    THURSDAY
    FRIDAY
}

model scheduleRide {
  id String @id @default(uuid())
  routeId String
  userId String
  vehicleId String
  driverId String
  fareUSD Float
  fareSLSH Float
  totalSeats Int
  takenSeats String[] @default([])
  startTime DateTime
  endTime DateTime
  day Days
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  route       Route     @relation(fields: [routeId], references: [id])
  driver      User     @relation( fields: [driverId], references: [id])
  vehicle     Vehicle   @relation(fields: [vehicleId], references: [id])
  bookings Booking[]
  seats Seats[]

}

model Seats {
  id             String        @id @default(uuid())
  vehicleId      String?
  scheduleRideId String
  seatNumber     Int
  isBooked       Boolean       @default(false)
  vehicle        Vehicle? @relation(fields: [vehicleId], references: [id])
    scheduleRide   scheduleRide  @relation(fields: [scheduleRideId], references: [id])
  bookedSeats BookingSeat[]
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  CANCELLED
}
enum currency {
  USD
  SLSH
}
enum paymentType {
  ZAAD
  eDAHAB
  KAASH_PLUS
  BANK
  OFFLINE
  CASH
}
model Booking {
  id String @id @default(uuid())
  userId         String
  scheduleRideId String
  seatsIds String[]
  name String
  phoneNumber String
  amount Int
  qty Int
  total_amount Int
  paymentType    paymentType
  currency       currency
  paymentStatus  PaymentStatus @default(PENDING)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  user          User         @relation(fields: [userId], references: [id])
  scheduleRide  scheduleRide @relation(fields: [scheduleRideId], references: [id])
  bookedSeats BookingSeat[]  

}

model BookingSeat {
  id        String  @id @default(uuid())
  bookingId String
  seatId    String

  booking Booking @relation(fields: [bookingId], references: [id])
  seat    Seats   @relation(fields: [seatId], references: [id])
}
